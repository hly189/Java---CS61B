#BlueJ class context
comment0.params=
comment0.target=boolean\ isValidNode()
comment0.text=\n\ \ isValidNode\ returns\ true\ if\ this\ node\ is\ valid;\ false\ otherwise.\n\n\ \ @return\ true\ if\ this\ node\ is\ valid;\ false\ otherwise.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment1.params=
comment1.target=java.lang.Object\ item()
comment1.text=\n\ \ item()\ returns\ this\ node's\ item.\ \ If\ this\ node\ is\ invalid,\n\ \ throws\ an\ exception.\n\n\ \ @return\ the\ item\ stored\ in\ this\ node.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment2.params=item
comment2.target=void\ setItem(java.lang.Object)
comment2.text=\n\ \ setItem()\ sets\ this\ node's\ item\ to\ "item".\ \ If\ this\ node\ is\ invalid,\n\ \ throws\ an\ exception.\n\n\ \ Performance\:\ \ runs\ in\ O(1)\ time.\n
comment3.params=
comment3.target=int\ children()
comment3.text=\n\ \ children()\ returns\ the\ number\ of\ children\ of\ the\ node\ at\ this\ position.\n
comment4.params=
comment4.target=TreeNode\ parent()
comment4.text=\n\ \ parent()\ returns\ the\ parent\ TreeNode\ of\ this\ TreeNode.\ \ Throws\ an\n\ \ exception\ if\ `this'\ is\ not\ a\ valid\ node.\ \ Returns\ an\ invalid\ TreeNode\ if\n\ \ this\ node\ is\ the\ root.\n
comment5.params=c
comment5.target=TreeNode\ child(int)
comment5.text=\n\ \ child()\ returns\ the\ cth\ child\ of\ this\ TreeNode.\ \ Throws\ an\ exception\ if\n\ \ `this'\ is\ not\ a\ valid\ node.\ \ Returns\ an\ invalid\ TreeNode\ if\ there\ is\ no\n\ \ cth\ child.\n
comment6.params=
comment6.target=TreeNode\ nextSibling()
comment6.text=\n\ \ nextSibling()\ returns\ the\ next\ sibling\ TreeNode\ to\ the\ right\ from\ this\n\ \ TreeNode.\ \ Throws\ an\ exception\ if\ `this'\ is\ not\ a\ valid\ node.\ \ Returns\n\ \ an\ invalid\ TreeNode\ if\ there\ is\ no\ sibling\ to\ the\ right\ of\ this\ node.\n
comment7.params=item\ c
comment7.target=void\ insertChild(java.lang.Object,\ int)
comment7.text=\n\ \ insertChild()\ inserts\ an\ item\ as\ the\ cth\ child\ of\ this\ node.\ \ Existing\n\ \ children\ numbered\ c\ or\ higher\ are\ shifted\ one\ place\ to\ the\ right\n\ \ to\ accommodate.\ \ If\ the\ current\ node\ has\ fewer\ than\ c\ children,\n\ \ the\ new\ item\ is\ inserted\ as\ the\ last\ child.\ \ If\ c\ <\ 1,\ act\ as\ if\ c\ is\ 1.\n
comment8.params=
comment8.target=void\ removeLeaf()
comment8.text=\n\ \ removeLeaf()\ removes\ the\ node\ at\ the\ current\ position\ from\ the\ tree\ if\n\ \ it\ is\ a\ leaf.\ \ Does\ nothing\ if\ `this'\ has\ one\ or\ more\ children.\ \ Throws\n\ \ an\ exception\ if\ `this'\ is\ not\ a\ valid\ node.\ \ If\ 'this'\ has\ siblings\ to\n\ \ its\ right,\ those\ siblings\ are\ all\ shifted\ left\ by\ one.\n
numComments=9
